
const createStrForTG = (chain) => {
    const symbol = `üü° ${chain.baseAsset}/${chain.quoteAsset} [[${chain.names[0]} | ${chain.names[1]}]]\n\n`

    const byFrom = `üè¢| *${chain.buyFrom}* |\n`
    const priceInBuyExchange = `–¶–µ–Ω–∞: ${chain.avgPriceInBuyEx} [[${chain.pricesInBuyEx[0]}--${chain.pricesInBuyEx[1]}]]\n`
    const volumeInBuyExchange = `–û–±—ä–µ–º: *${chain.maxDealInBuyEx}*üí≤, ${chain.valueInBuyEx}, ${chain.ordersInBuyEx} ${getEnding(chain.ordersInBuyEx)}\n\n`

    const sellTo = `üè£| *${chain.sellTo}* |\n`
    const priceInSellExchange = `–¶–µ–Ω–∞: ${chain.avgPriceInSellEx} [[${chain.pricesInSellEx[0]}--${chain.pricesInSellEx[1]}]]\n`
    const volumeInSellExchange = `–û–±—ä–µ–º: *${chain.maxDealInSellEx}*üí≤, ${chain.valueInSellEx}, ${chain.ordersInSellEx} ${getEnding(chain.ordersInSellEx)}\n\n`

    const extraFee = chain.extraFee == 0 ? '\n' : ` / –¥–æ–ø *${chain.extraFee}%*\n`
    const commission = `–ö–æ–º–∏—Å—Å–∏—è: —Å–ø–æ—Ç *${chain.totalFeeSpot}*üí≤ / –ø–µ—Ä–µ–≤–æ–¥ *${chain.feeWithdraw}*üí≤ (${chain.feeWithdrawInCoins} ${chain.baseAsset})${extraFee}` 

    let network = `üåê –°–µ—Ç—å: `
    if(Object.keys(chain.withdrawInfo).length === 0) {
        network = network + '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚ùóÔ∏è'
    } else {
        network = network + `${chain.withdrawInfo.firstTransferArr.network} `
    }

    let thirdExchange = ''
    if(chain.withdrawInfo.secondTransferArr) {
        thirdExchange = `‚û°Ô∏è ${chain.withdrawInfo.betweenExchange} ‚û°Ô∏è ${chain.withdrawInfo.secondTransferArr.network}`
    }
    const spred = `\nüí∞ –ß–∏—Å—Ç—ã–π —Å–ø—Ä–µ–¥: *${chain.profitInUSDT}*üíµ *(${chain.realPercent}%)*\n`
    let hedging = '\n'
    if(chain.hedging) {
        hedging = `‚úÖ –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n`
    }

    let stablePrisesStr = ''
    for (let key in chain.stablePrices) {
        const oneStable = `${key}: ${chain.stablePrices[key]}üí≤`
        if(stablePrisesStr === '') {
            stablePrisesStr = '–§–∏–∫—Å: ' + oneStable
        } else {
            stablePrisesStr = stablePrisesStr + ', ' + oneStable
        }
    }
    stablePrisesStr == '' ? stablePrisesStr = '' : stablePrisesStr = stablePrisesStr+'\n\n'
    let time = `${chain.time}`

    const str = symbol+byFrom+priceInBuyExchange+volumeInBuyExchange+sellTo+priceInSellExchange+volumeInSellExchange+commission+network+thirdExchange+spred+hedging+stablePrisesStr+time
    return str
}


function getEnding(number) {
    if (number === 1) {
      return '–æ—Ä–¥–µ—Ä';
    } else if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) {
      return '–æ—Ä–¥–µ—Ä–∞';
    } else {
      return '–æ—Ä–¥–µ—Ä–æ–≤';
    }
  }

module.exports = { createStrForTG }
